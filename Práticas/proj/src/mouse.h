#include <lcom/lcf.h>
#include <lcom/liblm.h>
#include <lcom/proj.h>

#include <stdbool.h>
#include <stdint.h>

#include "i8042.h"
#include "sprite.h"

#ifndef PROJ_MOUSE_H
#define PROJ_MOUSE_H

#define signal_mask 0xFF00 /**< @brief mask used for sign extension of packet bytes */
#define MOUSE_DEFAULT_X 576 /**< @brief Mouse's starting x coordinate */ 
#define MOUSE_DEFAULT_Y 432 /**< @brief Mouse's starting y coordinate */

/**
 * @brief Identifier of the return value of mouse_interrupt_handler()
 * 
 */
enum mouse_error {
    MOUSE_EMPTY_BUFFER = 2,
    MOUSE_INVALID_READING = 1,
    MOUSE_VALID_READING = 0
};

/**
 * @brief Mouse events types
 * 
 */
enum mouse_event{
    L_PRESSED, R_PRESSED, L_RELEASED,
    R_RELEASED, BUTTON_EVENT, MOUSE_MOVE
};

/**
 * @brief Subscribes mouse interruptions
 * 
 * @param bit_number pic number line 
 * @return int 0 upon success, non-zero otherwise
 */
int mouse_subscribe_int(uint8_t * bit_number);
/**
 * @brief Unsubscribes mouse interruptions
 * 
 * @return int 0 upon success, non-zero otherwise
 */
int mouse_unsubscribe_int();

/**
 * @brief Cleans all the possible bytes from output buffer of KBC
 * 
 * @return int 0 upon success, non-zero otherwise 
 */
int mouse_output_buffer_flush();

/**
 * @brief Reads the mouse current status
 * 
 * @param st status value which will be filled with all the information
 * @return int 0 upon success, non-zero otherwise
 */
int mouse_read_status(uint8_t *st);
/**
 * @brief Reports the current state of kbc's output buffer
 * 
 * @return int from enum mouse_error
 */
int mouse_out_buffer();
/**
 * @brief Reports the current state of kbc's input buffer
 * 
 * @return int from enum mouse_error
 */
int mouse_in_buffer();

/**
 * @brief Sends a command to the mouse without processing
 * 
 * @param cmd command to be sent
 * @return int 0 upon success, non-zero otherwise
 */
int mouse_send_command(uint8_t cmd);

/**
 * @brief Handles interrupts generated by the mouse
 * 
 * @param data byte sent by the mouse
 * @return int 0 upon suc
 */
int mouse_interrupt_handler(uint8_t *data);
/**
 * @brief Assembles the packet with the info provided from the bytes sent fromthe mouse
 * 
 * @param pCounter variable to keep tracking of the index of the most recent byte 
 * @param p packet where all the information will be placed
 * @param data byte sent from the mouse
 * @return int 0 upon success, non-zero otherwise
 */
int mouse_packet_assemble(int *pCounter, struct packet *p, uint8_t *data);

/**
 * @brief State machine designed to detect mouse events
 * 
 * @param pp packet containg mouse's information
 * @return int evente identifier
 */
int detect_event(struct packet *pp);

/**
 * @brief Keeps tracking the movement of the cursor according to the information present in the mouse packet
 * 
 * @param pp packet containg mouse's information
 * @param buffer where to draw the mouse's sprite
 */
void move_cursor(struct packet *pp, char *buffer);

#endif
