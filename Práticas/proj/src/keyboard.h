#include <lcom/lcf.h>
#include <lcom/liblm.h>
#include <lcom/proj.h>

#include <stdbool.h>
#include <stdint.h>

#include "i8042.h"

#ifndef PROJ_KBD_H
#define PROJ_KBD_H

#define ALPHABET_LENGTH 26  /**< @brief Alphabet Lenght*/
#define ESC 0x81    /**< @brief ESC Breakcode */
#define SPACE 0x39  /**< @brief Space Makecode */
#define BACK_SPACE 0x0e /**< @brief BackSpace Makecode */
#define ENTER 0x1c  /**< @brief Enter Makecode */

/**
 * @brief Detects if some special character was press
 * 
 */
enum keyboard_data{
    ESC_KEY = -5,
    SPACE_KEY,
    BACK_SPACE_KEY,
    ENTER_KEY,
    UNUSED_KEY
};

/**
 * @brief Identifier of the return value of keyboard_interrupt_handler()
 * 
 */
enum keyboard_error{
    KBD_EMPTY_BUFFER = 2,
    KBD_INVALID_READING = 1,
    KBD_VALID_READING = 0
};

/**
 * @brief Subscribes keyboard interruptions
 * 
 * @param bit_number pic number line 
 * @return int 0 upon success, non-zero otherwise
 */
int keyboard_susbcribe_int(uint8_t *bit_number);
/**
 * @brief Unsubscribes keyboard interruptions
 * 
 * @return int 0 upon success, non-zero otherwise
 */
int keyboard_unsusbcribe_int();

/**
 * @brief Reads the current keyboard status to st
 * 
 * @param st keyboard status
 * @return int 0 upon success, non-zero otherwise
 */
int keyboard_read_status(uint8_t *st);
/**
 * @brief Checks whether or not KBC output buffer has some byte available to read
 * 
 * @return true if KBC output buffer is not empty
 * @return false if KBC output buffer is empty
 */
bool keyboard_out_buffer();
/**
 * @brief Checks whether or not KBC input buffer is empty
 * 
 * @return true if KBC input buffer is not empty
 * @return false if KBC input buffer is empty
 */
bool keyboard_in_buffer();

/**
 * @brief Handles interrupts generated by the keyboard
 * 
 * @param data byte sent by the keyboard
 * @return int 0 upon success, non-zero otherwise
 */
int keyboard_interrupt_handler(uint8_t *data);
/**
 * @brief Recgonizes a scancode sent by the keyboard to a character present in an array of characters 
 * 
 * @param code scancode sent by the keyboard
 * @return int index to the global array of characters according to the scancode passed as code 
 */
int keyboard_recognizeScanCode(uint8_t code);

#endif
